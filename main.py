import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN
from weather_api import WeatherForecast
from weather_formatter import WeatherFormatter
from user_data_manager import UserDataManager

data = UserDataManager("user_data.json")

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher(storage=storage)


class Form(StatesGroup):
    waiting_for_coords = State()


main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚òÅÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")],
    [KeyboardButton(text="üìç –ü–µ—Ä–µ–¥–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)],
    [KeyboardButton(text="üìå –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é")],
    [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]],
    resize_keyboard=True)


@dispatcher.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã üå§Ô∏è\n\n"
        "–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–µ–Ω—è –≤–ø–µ—Ä–≤—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. "
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ª–∏–±–æ —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, "
        "–ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.\n\n"
        "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ—ë –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. "
        "–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–µ–¥–µ—Ç–µ –≤ –æ—Ç–ø—É—Å–∫ –∏–ª–∏ –∫ –±–∞–±—É—à–∫–µ –≤ –¥–µ—Ä–µ–≤–Ω—é ‚Äî "
        "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.\n\n"
        "–ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–¥–µ–≤–∞—Ç—å—Å—è –ø–æ –ø–æ–≥–æ–¥–µ! ‚òÅÔ∏è",
        reply_markup=main_menu)


@dispatcher.message(F.location)
async def get_location(message: types.Message):
    user_id = str(message.from_user.id)
    lat = message.location.latitude
    lon = message.location.longitude

    data.set(user_id, {"lat": lat, "lon": lon})
    await message.answer("‚úÖ –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@dispatcher.message(F.text == "üìå –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é")
async def ask_for_coords(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞\n"
                         "–ü—Ä–∏–º–µ—Ä: 10.1010, 10.1010\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–æ—Ç–º–µ–Ω–∞</b> —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
                         parse_mode="HTML")
    await state.set_state(Form.waiting_for_coords)


@dispatcher.message(Form.waiting_for_coords, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_coords_input(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu)
    await state.clear()


@dispatcher.message(Form.waiting_for_coords)
async def get_coords(message: types.Message, state: FSMContext):
    try:
        lat_str, lon_str = message.text.split(",")
        lat = float(lat_str.strip())
        lon = float(lon_str.strip())
    except Exception:
        await message.answer("–ö–æ–æ—Ä—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 10.1010, 10.1010")
        return

    user_id = str(message.from_user.id)
    data.set(user_id, {"lat": lat, "lon": lon})

    await message.answer("‚úÖ –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await state.clear()


@dispatcher.message(F.text == "‚òÅÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def get_weather_menu(message: types.Message):
    user_id = str(message.from_user.id)
    location = data.get(user_id)

    if not data.exist(user_id):
        await message.answer("–î–∞–Ω–Ω—ã–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üìç")
        return

    weather = WeatherForecast(lat=location["lat"], lon=location["lon"])
    forecast = weather.get_forecast()
    formatter = WeatherFormatter(todays_weather=forecast[0], three_days_weather=forecast[1])

    await message.answer(formatter.format_today() + "\n\n" +
                         "<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∏ –¥–Ω—è:</b>\n\n" +
                         formatter.format_three_days(),
                         parse_mode="HTML",
                         reply_markup=main_menu)


@dispatcher.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_cmd(message: types.Message):
    await start_cmd(message)


async def main():
    await dispatcher.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
